const post_reaction = require("../models/post_reaction");
const post = require("../models/post");
const noti_token = require("../models/noti_token");
const notification = require("../models/notification");
const axios = require("axios");

module.exports = {
    addPost_Reaction,
    deletePost_reaction,
}

async function addPost_Reaction(ID_post, ID_user, ID_reaction) {
    try {
        // üìå T√¨m b√†i post ƒë·ªÉ l·∫•y th√¥ng tin ch·ªß b√†i vi·∫øt
        const postInfo = await post.findById(ID_post);
        if (!postInfo) {
            return { status: false, message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" };
        }
        if (!ID_user) {
            return { status: false, message: "Kh√¥ng t√¨m th·∫•y ID_user" };
        }
        if (!ID_reaction) {
            return { status: false, message: "Kh√¥ng t√¨m th·∫•y ID_reaction" };
        }

        // üìå Ch·ªß b√†i vi·∫øt
        const postOwner = postInfo.ID_user.toString();

        // Ki·ªÉm tra xem user ƒë√£ react v√†o post ch∆∞a
        const existingReaction = await post_reaction.findOne({ ID_post, ID_user });

        let savedReaction;
        let message;

        if (existingReaction) {
            // N·∫øu ƒë√£ c√≥ reaction, c·∫≠p nh·∫≠t ID_reaction
            const oldReactionId = existingReaction._id;

            // X√≥a notification c≈© li√™n quan ƒë·∫øn reaction n√†y (n·∫øu c√≥)
            await notification.deleteOne({ ID_post_reaction: oldReactionId });

            // C·∫≠p nh·∫≠t reaction
            const updatedReaction = await post_reaction.findOneAndUpdate(
                { ID_post, ID_user },
                { ID_reaction },
                { new: true }
            );

            savedReaction = updatedReaction;
            message = "ƒê·ªïi reaction th√†nh c√¥ng";
        } else {
            // N·∫øu ch∆∞a c√≥ reaction tr∆∞·ªõc ƒë√≥, t·∫°o m·ªõi
            const newPost_Reaction = new post_reaction({ ID_post, ID_user, ID_reaction });
            savedReaction = await newPost_Reaction.save();
            message = "T·∫°o post_reaction m·ªõi th√†nh c√¥ng";
        }

        // üîî T·∫°o th√¥ng b√°o n·∫øu ng∆∞·ªùi th·∫£ reaction KH√îNG PH·∫¢I l√† ch·ªß b√†i vi·∫øt
        if (ID_user !== postOwner) {
            const newNotification = new notification({
                ID_post_reaction: savedReaction._id,
                ID_user: postOwner,
                type: "ƒê√£ th·∫£ bi·ªÉu c·∫£m v√†o b√†i vi·∫øt c·ªßa b·∫°n",
            });

            const savedNotification = await newNotification.save();

            // üì§ G·ª≠i th√¥ng b√°o FCM
            try {
                const fcmToken = await noti_token.findOne({ ID_user: postOwner }).select('ID_user tokens');
                if (fcmToken && fcmToken.tokens && fcmToken.tokens.length > 0) {
                    await axios.post(
                        `https://linkage.id.vn/gg/send-notification`,
                        {
                            fcmTokens: fcmToken.tokens,
                            title: "Th√¥ng b√°o",
                            body: null,
                            ID_noties: [savedNotification._id.toString()],
                        },
                        {
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        }
                    );
                    console.log(`FCM sent for notification ${savedNotification._id}`);
                } else {
                    console.log(`No valid FCM tokens found for user ${postOwner}`);
                }
            } catch (fcmError) {
                console.error(`L·ªói g·ª≠i FCM notification for user ${postOwner}:`, fcmError.response?.data || fcmError.message);
                // Ti·∫øp t·ª•c tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng ngay c·∫£ khi FCM th·∫•t b·∫°i
            }
        }

        return {
            status: true,
            message,
            post_reaction: {
                _id: savedReaction._id,
                ID_post: savedReaction.ID_post,
                ID_user: savedReaction.ID_user,
                ID_reaction: savedReaction.ID_reaction,
            },
        };
    } catch (error) {
        console.error("L·ªói addPost_Reaction:", error);
        return { status: false, message: "L·ªói API", error: error.message };
    }
}

// delete vƒ©nh vi·ªÖn
async function deletePost_reaction(_id) {
    try {
        // X√≥a notification li√™n quan ƒë·∫øn reaction tr∆∞·ªõc
        await notification.deleteOne({ ID_post_reaction: _id });
        // X√≥a b√†i post_reaction
        await post_reaction.findByIdAndDelete(_id)
        return true;
    } catch (error) {
        console.error("L·ªói khi x√≥a b√†i post:", error);
        return false;
    }
}