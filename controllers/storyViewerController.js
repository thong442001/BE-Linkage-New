const storyViewer = require("../models/storyViewer");
const post = require("../models/post");
const noti_token = require("../models/noti_token");
const notification = require("../models/notification");
const axios = require("axios");

module.exports = {
    addStoryViewer_reaction,
    storyViewerOfStory,
};

// H√†m x·ª≠ l√Ω khi user xem story
async function storyViewerOfStory(ID_post, ID_user) {
    try {
        // üìå Ki·ªÉm tra xem user ƒë√£ xem story n√†y ch∆∞a
        let storyViewer_user = await storyViewer.findOne({
            ID_post: ID_post,
            ID_user: ID_user,
        }).lean();

        if (!storyViewer_user) {
            // N·∫øu ch∆∞a xem, t·∫°o b·∫£n ghi m·ªõi v·ªõi ID_reaction l√† null
            storyViewer_user = await storyViewer.create({
                ID_post: ID_post,
                ID_user: ID_user,
                ID_reaction: null,
            });
        }

        // L·∫•y t·∫•t c·∫£ storyViewer c·ªßa story n√†y
        const data = await storyViewer
            .find({ ID_post: ID_post })
            .populate("ID_user", "first_name last_name avatar")
            .populate("ID_reaction", "name icon")
            .sort({ createdAt: -1 })
            .lean();

        return {
            status: true,
            message: "L·∫•y danh s√°ch storyViewer th√†nh c√¥ng",
            data: data,
        };
    } catch (error) {
        console.error("L·ªói getStoryViewerOfStory:", error);
        return {
            status: false,
            message: "L·ªói API",
            error: error.message,
        };
    }
}

// H√†m x·ª≠ l√Ω khi user th·∫£ bi·ªÉu c·∫£m (reaction) v√†o story
async function addStoryViewer_reaction(ID_post, ID_user, ID_reaction) {
    try {
        // üìå Ki·ªÉm tra xem b√†i vi·∫øt c√≥ t·ªìn t·∫°i kh√¥ng
        const postInfo = await post.findById(ID_post);
        if (!postInfo) {
            return { status: false, message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" };
        }

        // üìå Ch·ªß b√†i vi·∫øt
        const postOwner = postInfo.ID_user.toString();

        // üìå Ki·ªÉm tra xem user ƒë√£ xem story n√†y ch∆∞a
        const existingStoryViewer = await storyViewer.findOne({
            ID_post,
            ID_user,
        });

        if (!existingStoryViewer) {
            return {
                status: false,
                message: "User ch∆∞a xem story n√†y, kh√¥ng th·ªÉ th·∫£ bi·ªÉu c·∫£m",
            };
        }

        // C·∫≠p nh·∫≠t ID_reaction cho b·∫£n ghi storyViewer ƒë√£ c√≥
        const updatedStoryViewer = await storyViewer
            .findOneAndUpdate(
                { ID_post, ID_user },
                { ID_reaction },
                { new: true }
            )
            .populate("ID_user", "first_name last_name avatar")
            .populate("ID_reaction", "name icon")
            .lean();

        // üîî T·∫°o th√¥ng b√°o n·∫øu ng∆∞·ªùi th·∫£ reaction kh√¥ng ph·∫£i l√† ch·ªß b√†i vi·∫øt
        if (ID_user !== postOwner) {
            const newNotification = new notification({
                ID_post: updatedStoryViewer.ID_post,
                ID_user: postOwner, // G·ª≠i th√¥ng b√°o cho ch·ªß b√†i vi·∫øt
                type: "ƒê√£ th·∫£ bi·ªÉu c·∫£m v√†o story c·ªßa b·∫°n",
            });

            const savedNotification = await newNotification.save();

            // üì§ G·ª≠i th√¥ng b√°o FCM
            const fcmToken = await noti_token
                .findOne({ ID_user: postOwner })
                .select("ID_user tokens");

            if (fcmToken && fcmToken.tokens) {
                await axios.post(
                    `https://linkage.id.vn/gg/send-notification`,
                    {
                        fcmTokens: fcmToken.tokens,
                        title: "Th√¥ng b√°o",
                        body: null,
                        ID_noties: [savedNotification._id.toString()],
                    }
                );
            }
        }

        return {
            status: true,
            message: "Th·∫£ bi·ªÉu c·∫£m th√†nh c√¥ng",
            storyViewer: updatedStoryViewer,
        };
    } catch (error) {
        console.error("L·ªói addStoryViewer_reaction:", error);
        return {
            status: false,
            message: "L·ªói API",
            error: error.message,
        };
    }
}