const axios = require("axios");
const relationship = require("../models/relationship");
const noti_token = require("../models/noti_token");
const notification = require("../models/notification");

module.exports = {
    getRelationshipAvsB,
    guiLoiMoiKetBan,
    chapNhanLoiMoiKetBan,
    huyLoiMoiKetBan,
    huyBanBe,
    getAllLoiMoiKetBan,
    getAllFriendOfID_user,
}

async function getRelationshipAvsB(ID_user, me) {
    try {
        let relationshipData = await relationship.findOne({
            $or: [
                { ID_userA: ID_user, ID_userB: me },
                { ID_userA: me, ID_userB: ID_user }
            ]
        }).lean();

        // N·∫øu c√≥ m·ªëi quan h·ªá, tr·∫£ v·ªÅ lu√¥n
        if (relationshipData) return relationshipData;

        // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi v·ªõi tr·∫°ng th√°i "Ng∆∞·ªùi l·∫°"
        return await relationship.create({
            ID_userA: ID_user,
            ID_userB: me,
            relation: 'Ng∆∞·ªùi l·∫°',
        });

    } catch (error) {
        console.log(error);
        throw error;
    }
}

async function guiLoiMoiKetBan(ID_relationship, me) {
    try {
        // T√¨m quan h·ªá gi·ªØa hai ng∆∞·ªùi
        const relation = await relationship.findById(ID_relationship)

        if (!relation || relation.relation !== 'Ng∆∞·ªùi l·∫°') {
            console.log("relation ko c√≥")
            return false;
        }

        let newRelationStatus = "";
        let receiverId; // Ng∆∞·ªùi nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n

        if (relation.ID_userA.equals(me)) {
            newRelationStatus = 'A g·ª≠i l·ªùi k·∫øt b·∫°n B';
            receiverId = relation.ID_userB;
        } else if (relation.ID_userB.equals(me)) {
            newRelationStatus = 'B g·ª≠i l·ªùi k·∫øt b·∫°n A';
            receiverId = relation.ID_userA;
        } else {
            console.log("ss ID vs me k ƒëc")
            return false;
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªùi m·ªùi k·∫øt b·∫°n
        relation.relation = newRelationStatus;
        await relation.save();

        // T·∫°o notification
        const notificationItem = new notification({
            ID_relationship: relation._id,
            ID_user: receiverId,
            type: 'L·ªùi m·ªùi k·∫øt b·∫°n',
        });

        await notificationItem.save();

        // G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n l·ªùi m·ªùi
        await guiThongBao(receiverId, notificationItem._id);

        return relation;
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n:", error);
        throw error;
    }
}


// üõ† H√†m g·ª≠i th√¥ng b√°o k·∫øt b·∫°n
async function guiThongBao(ID_user, ID_noti) {
    try {

        const check_noti_token = await noti_token.findOne({ "ID_user": ID_user });
        if (!check_noti_token || !check_noti_token.token) return;

        await axios.post(
            //`http://localhost:3001/gg/send-notification`,
            `https://linkage.id.vn/gg/send-notification`,
            {
                fcmTokens: [check_noti_token.token],
                title: "Th√¥ng b√°o",
                body: null,
                ID_noties: [ID_noti],
            },
        );
        return;
    } catch (error) {
        console.error("‚ö†Ô∏è L·ªói khi g·ª≠i th√¥ng b√°o FCM:", error.response?.data || error.message);
    }
}


async function chapNhanLoiMoiKetBan(ID_relationship) {
    try {
        // chapNhanLoiMoiKetBan l√† set l·∫°i relation: 'B·∫°n b√®'
        const relation = await relationship.findById(ID_relationship);
        if (relation && (relation.relation == 'A g·ª≠i l·ªùi k·∫øt b·∫°n B' || relation.relation == 'B g·ª≠i l·ªùi k·∫øt b·∫°n A')) {

            let receiverId; // Ng∆∞·ªùi g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
            if (relation.relation == 'A g·ª≠i l·ªùi k·∫øt b·∫°n B') {
                receiverId = relation.ID_userA;
            } else if (relation.relation == 'B g·ª≠i l·ªùi k·∫øt b·∫°n A') {
                receiverId = relation.ID_userB;
            }

            // T·∫°o notification
            const notificationItem = new notification({
                ID_relationship: relation._id,
                ID_user: receiverId,
                type: 'ƒê√£ th√†nh b·∫°n b√® c·ªßa b·∫°n',
            });
            await notificationItem.save();

            // G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n l·ªùi m·ªùi
            await guiThongBao(receiverId, notificationItem._id);

            // set l·∫°i
            relation.relation = 'B·∫°n b√®';
            await relation.save();

            return relation;
        } else {
            return false;
        }
    } catch (error) {
        console.log(error);
        throw error;
    }
}

async function huyLoiMoiKetBan(ID_relationship) {
    try {
        const relation = await relationship.findById(ID_relationship);
        if (relation) {
            if (relation.relation == 'A g·ª≠i l·ªùi k·∫øt b·∫°n B' || relation.relation == 'B g·ª≠i l·ªùi k·∫øt b·∫°n A') {
                // set l·∫°i
                relation.relation = 'Ng∆∞·ªùi l·∫°';
                await relation.save();
                return relation;
            } else {
                return false;
            }
        } else {
            return false;
        }
    } catch (error) {
        console.log(error);
        throw error;
    }
}

async function huyBanBe(ID_relationship) {
    try {
        const relation = await relationship.findById(ID_relationship);
        if (relation) {
            if (relation.relation == 'B·∫°n b√®') {
                // set l·∫°i
                relation.relation = 'Ng∆∞·ªùi l·∫°';
                await relation.save();
                return relation;
            } else {
                return false;
            }
        } else {
            return false;
        }
    } catch (error) {
        console.log(error);
        throw error;
    }
}

// get all l·ªùi m·ªùi k·∫øt b·∫°n
async function getAllLoiMoiKetBan(me) {
    try {
        // T√¨m t·∫•t c·∫£ c√°c l·ªùi m·ªùi k·∫øt b·∫°n
        const relationships = await relationship.find({
            $or: [
                { ID_userA: me, relation: 'B g·ª≠i l·ªùi k·∫øt b·∫°n A' },
                { ID_userB: me, relation: 'A g·ª≠i l·ªùi k·∫øt b·∫°n B' }
            ]
        })
            .populate('ID_userA', 'first_name last_name avatar')
            .populate('ID_userB', 'first_name last_name avatar')
            .lean(); // Convert to plain JS objects

        return relationships;

        // **** c√°ch 2 ****
        // const relationships = find1.concat(find2);
        // await relationships.populate('ID_userA', 'first_name last_name avatar')
        //     .populate('ID_userB', 'first_name last_name avatar');
        // return relationships;
    } catch (error) {
        console.log(error);
        throw error;
    }
}

// get all b·∫°n b√®
async function getAllFriendOfID_user(me) {
    try {
        // T√¨m t·∫•t c·∫£ c√°c b·∫°n b√®
        const relationships = await relationship.find({
            $or: [
                { ID_userA: me, relation: 'B·∫°n b√®' },
                { ID_userB: me, relation: 'B·∫°n b√®' }
            ]
        })
            .populate('ID_userA', 'first_name last_name avatar')
            .populate('ID_userB', 'first_name last_name avatar')
            .lean(); // Convert to plain JS objects

        return relationships;

    } catch (error) {
        console.log(error);
        throw error;
    }
}