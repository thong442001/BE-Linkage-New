const { Server } = require("socket.io");
const axios = require("axios");
const message = require("./models/message");
const user = require("./models/user");
const message_reaction = require("./models/message_reaction");
const group = require("./models/group");
const noti_token = require("./models/noti_token");
const notification = require("./models/notification");

const onlineUsers = new Map(); // L∆∞u user online


function setupSocket(server) {
    const io = new Server(server, {
        cors: {
            origin: '*', // Cho ph√©p b·∫•t k·ª≥ ngu·ªìn n√†o ho·∫∑c ch·ªâ ƒë·ªãnh URL c·ªßa ·ª©ng d·ª•ng React Native c·ªßa b·∫°n
            methods: ['GET', 'POST'],
            allowedHeaders: ['Content-Type'],
        },
        transports: ['websocket', 'polling'],
        // Th√™m 'websocket' ƒë·ªÉ t·ªëi ∆∞u k·∫øt n·ªëi
        // ƒê·∫£m b·∫£o s·ª≠ d·ª•ng polling nh∆∞ ph∆∞∆°ng √°n thay th·∫ø
    });

    // L·∫Øng nghe k·∫øt n·ªëi t·ª´ client
    io.on('connection', (socket) => {

        console.log(`‚úÖ User connected: ${socket.id}`);

        // Khi user login, l∆∞u v√†o danh s√°ch online
        socket.on("user_online", async (ID_user) => {
            if (!ID_user) return;

            onlineUsers.set(ID_user, socket.id);
            console.log(`üü¢ User ${ID_user} is online`);

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong database (n·∫øu c·∫ßn)
            await user.findByIdAndUpdate(ID_user, { isActive: 2 });

            // Ph√°t danh s√°ch user online cho t·∫•t c·∫£ client
            io.emit("online_users", Array.from(onlineUsers.keys()));
        });

        socket.on("joinGroup", (ID_group) => {
            if (!ID_group) {
                console.error("‚ùå Group ID is missing!");
                return;
            }
            socket.join(ID_group);
            console.log(`üë• User ${socket.id} joined group: ${ID_group}`);
        });

        socket.on('send_message', async (data) => {
            const { ID_group, sender, content, type, ID_message_reply } = data;
            // T√¨m th√¥ng tin ng∆∞·ªùi g·ª≠i t·ª´ database
            const checkUser = await user.findById(sender);
            if (checkUser == null) {
                console.log('Kh√¥ng t√¨m th·∫•y user!');
                return;
            }
            // L∆∞u tin nh·∫Øn v√†o database
            const newMessage = new message({
                ID_group,
                sender,
                content,
                type,
                ID_message_reply,
                _destroy: false,
            });
            await newMessage.save();

            // Ph√°t l·∫°i tin nh·∫Øn cho t·∫•t c·∫£ c√°c client
            const newMessageSocket = {
                _id: newMessage._id,// t·∫°o newMessage trc m·ªõi c√≥ _id
                ID_group,
                sender,
                content,
                type,
                ID_message_reply,
                first_name: checkUser.first_name,
                last_name: checkUser.last_name,
                avatar: checkUser.avatar,// Th√™m avatar
                updatedAt: newMessage.updatedAt,
                createdAt: newMessage.createdAt,// t·∫°o newMessage trc m·ªõi c√≥ createdAt
                _destroy: newMessage._destroy,
            };
            io.to(ID_group).emit('receive_message', newMessageSocket);

            // üîç T√¨m th√¥ng tin nh√≥m
            const groupInfo = await group.findById(ID_group);
            if (!groupInfo) {
                console.log('Kh√¥ng t√¨m th·∫•y nh√≥m!');
                return;
            }

            // üìú L·ªçc danh s√°ch th√†nh vi√™n (tr·ª´ ng∆∞·ªùi g·ª≠i)
            const memberIds = groupInfo.members
                .map(m => m.toString())
                .filter(id => id !== sender.toString());

            if (memberIds.length === 0) return; // ‚õî Kh√¥ng c√≥ ai ƒë·ªÉ g·ª≠i th√¥ng b√°o

            // üîç T√¨m FCM tokens k√®m `ID_user`
            const fcmTokens = await noti_token.find({ ID_user: { $in: memberIds } }).select('ID_user token');

            // üõ† T·∫°o th√¥ng b√°o cho t·ª´ng th√†nh vi√™n
            const notifications = fcmTokens.map(({ ID_user }) => ({
                ID_message: newMessage._id,
                ID_user: ID_user.toString(),
                type: 'Tin nh·∫Øn m·ªõi',
            }));

            // üíæ L∆∞u th√¥ng b√°o v√†o database
            const createdNotifications = await notification.insertMany(notifications);

            // üéØ Gh√©p `token` v·ªõi `notificationId`
            const notificationMap = createdNotifications.reduce((acc, noti) => {
                acc[noti.ID_user.toString()] = noti._id.toString();
                return acc;
            }, {});

            // üî• T·∫°o danh s√°ch g·ª≠i th√¥ng b√°o t·ª´ng ng∆∞·ªùi
            const messages = fcmTokens
                .map(({ ID_user, token }) => ({
                    token,
                    notificationId: notificationMap[ID_user.toString()],
                }))
                .filter(({ token }) => token && token.trim().length > 0); // L·ªçc token h·ª£p l·ªá

            if (messages.length === 0) return; // ‚õî Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá

            // üöÄ G·ª≠i t·ª´ng th√¥ng b√°o ri√™ng l·∫ª
            await Promise.all(messages.map(({ token, notificationId }) =>
                axios.post(
                    //`http://localhost:3001/gg/send-notification`,
                    `https://linkage.id.vn/gg/send-notification`,
                    {
                        fcmTokens: [token], // Ch·ªâ g·ª≠i cho 1 user
                        title: "Th√¥ng b√°o",
                        body: null,
                        ID_noties: [notificationId], // Notification t∆∞∆°ng ·ª©ng
                    })
            ));

        });

        // X·ª≠ l√Ω thu h·ªìi tin nh·∫Øn
        socket.on('revoke_message', async (data) => {
            const { ID_message, ID_group } = data;
            const messageEdit = await message.findById(ID_message)
            if (messageEdit) {
                // thu h·ªìi
                messageEdit._destroy = true;
                await messageEdit.save();
                console.log("‚úÖ Thu h·ªìi tin nh·∫Øn th√†nh c√¥ng");
            } else {
                console.log("‚ùå Tin nh·∫Øn kh√¥ng t·ªìn t·∫°i!");
            }
            const paramNew = {
                ID_message
            }
            io.to(ID_group).emit('message_revoked', paramNew);
        });

        // X·ª≠ l√Ω message_reaction
        socket.on('send_message_reaction', async (data) => {
            const { ID_group, ID_message, ID_user, ID_reaction } = data;
            // t√¨m coi message_reaction c√≥ ch∆∞a 
            const checkMessage_Reaction = await message_reaction.findOne({
                ID_message: ID_message,
                ID_user: ID_user,
                ID_reaction: ID_reaction
            })
            if (checkMessage_Reaction != null) {
                // n·∫øu c√≥ r·ªìi th√¨ tƒÉng quantity
                checkMessage_Reaction.quantity = checkMessage_Reaction.quantity + 1;
                await checkMessage_Reaction.save();
                // Populate l·∫°i d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
                const populatedReaction = await message_reaction.findById(checkMessage_Reaction._id)
                    .populate('ID_user', 'first_name last_name avatar')
                    .populate('ID_reaction', 'name icon')
                    .lean();
                io.to(ID_group).emit('receive_message_reation', populatedReaction);
            } else {
                // ch∆∞a th√¨ t·∫°o
                const newItem = {
                    ID_message,
                    ID_user,
                    ID_reaction,
                };
                const newMessage_Reaction = await message_reaction.create(newItem);
                // Populate l·∫°i d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
                const populatedMessage_Reaction = await message_reaction.findById(newMessage_Reaction._id)
                    .populate('ID_user', 'first_name last_name avatar')
                    .populate('ID_reaction', 'name icon')
                    .lean();

                io.to(ID_group).emit('receive_message_reation', populatedMessage_Reaction);
            }
        });

        // Khi user ng·∫Øt k·∫øt n·ªëi
        socket.on('disconnect', async () => {
            const ID_user = [...onlineUsers.entries()].find(([key, value]) => value === socket.id)?.[0];

            if (ID_user) {
                onlineUsers.delete(ID_user);
                console.log(`üî¥ User ${ID_user} is offline`);

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i offline trong database
                await user.findByIdAndUpdate(ID_user, { isActive: 1 });

                // Ph√°t danh s√°ch user online m·ªõi
                io.emit("online_users", Array.from(onlineUsers.keys()));
            }
            console.log(`‚ùå User disconnected: ${socket.id}`);
        });

        socket.on('connect_error', (err) => {
            console.error('‚ùå Socket connection error:', err.message);
        });
    });

    return io;
}

module.exports = setupSocket;